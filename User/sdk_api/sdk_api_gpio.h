#ifndef SDK_API_GPIO_H
#define SDK_API_GPIO_H

#include "debug.h"

#define HW_PORTA_BASE   0x00000000
#define HW_PORTB_BASE   0x00010000
#define HW_PORTC_BASE   0x00020000
#define HW_PORTD_BASE   0x00030000
#define HW_PORTE_BASE   0x00040000
#define HW_PORTF_BASE   0x00050000
#define HW_PORTG_BASE   0x00060000

typedef enum
{
    // Not connected
    PIN_NC = -1,

    PA_00 = HW_PORTA_BASE,
    PA_01,
    PA_02,
    PA_03,
    PA_04,
    PA_05,
    PA_06,
    PA_07,
    PA_08,
    PA_09,
    PA_10,
    PA_11,
    PA_12,
    PA_13,
    PA_14,
    PA_15,
    PA_16,
    PA_17,
    PA_18,
    PA_19,
    PA_20,
    PA_21,
    PA_22,
    PA_23,
    PA_24,
    PA_25,
    PA_26,
    PA_27,
    PA_28,
    PA_29,
    PA_30,
    PA_31,


    PB_00 = HW_PORTB_BASE,
    PB_01,
    PB_02,
    PB_03,
    PB_04,
    PB_05,
    PB_06,
    PB_07,
    PB_08,
    PB_09,
    PB_10,
    PB_11,
    PB_12,
    PB_13,
    PB_14,
    PB_15,
    PB_16,
    PB_17,
    PB_18,
    PB_19,
    PB_20,
    PB_21,
    PB_22,
    PB_23,
    PB_24,
    PB_25,
    PB_26,
    PB_27,
    PB_28,
    PB_29,
    PB_30,
    PB_31,

    PC_00 = HW_PORTC_BASE,
    PC_01,
    PC_02,
    PC_03,
    PC_04,
    PC_05,
    PC_06,
    PC_07,
    PC_08,
    PC_09,
    PC_10,
    PC_11,
    PC_12,
    PC_13,
    PC_14,
    PC_15,
    PC_16,
    PC_17,
    PC_18,
    PC_19,
    PC_20,
    PC_21,
    PC_22,
    PC_23,
    PC_24,
    PC_25,
    PC_26,
    PC_27,
    PC_28,
    PC_29,
    PC_30,
    PC_31,
    PD_00 = HW_PORTD_BASE,
    PD_01,
    PD_02,
    PD_03,
    PD_04,
    PD_05,
    PD_06,
    PD_07,
    PD_08,
    PD_09,
    PD_10,
    PD_11,
    PD_12,
    PD_13,
    PD_14,
    PD_15,
    PD_16,
    PD_17,
    PD_18,
    PD_19,
    PD_20,
    PD_21,
    PD_22,
    PD_23,
    PD_24,
    PD_25,
    PD_26,
    PD_27,
    PD_28,
    PD_29,
    PD_30,
    PD_31,
    PE_00 = HW_PORTE_BASE,
    PE_01,
    PE_02,
    PE_03,
    PE_04,
    PE_05,
    PE_06,
    PE_07,
    PE_08,
    PE_09,
    PE_10,
    PE_11,
    PE_12,
    PE_13,
    PE_14,
    PE_15,
    PE_16,
    PE_17,
    PE_18,
    PE_19,
    PE_20,
    PE_21,
    PE_22,
    PE_23,
    PE_24,
    PE_25,
    PE_26,
    PE_27,
    PE_28,
    PE_29,
    PE_30,
    PE_31,
    PF_00 = HW_PORTF_BASE,
    PF_01,
    PF_02,
    PF_03,
    PF_04,
    PF_05,
    PF_06,
    PF_07,
    PF_08,
    PF_09,
    PF_10,
    PF_11,
    PF_12,
    PF_13,
    PF_14,
    PF_15,
    PF_16,
    PF_17,
    PF_18,
    PF_19,
    PF_20,
    PF_21,
    PF_22,
    PF_23,
    PF_24,
    PF_25,
    PF_26,
    PF_27,
    PF_28,
    PF_29,
    PF_30,
    PF_31,
    PG_00 = HW_PORTG_BASE,
    PG_01,
    PG_02,
    PG_03,
    PG_04,
    PG_05,
    PG_06,
    PG_07,
    PG_08,
    PG_09,
    PG_10,
    PG_11,
    PG_12,
    PG_13,
    PG_14,
    PG_15,
    PG_16,
    PG_17,
    PG_18,
    PG_19,
    PG_20,
    PG_21,
    PG_22,
    PG_23,
    PG_24,
    PG_25,
    PG_26,
    PG_27,
    PG_28,
    PG_29,
    PG_30,
    PG_31,
} pin_t;



typedef struct
{
  pin_t pin;
  uint32_t peripheral;
  uint32_t attribute;
} pin_map_t;


enum{
  HW_GPIO_PIN_NOPULL,
  HW_GPIO_PIN_PULLUP,
  HW_GPIO_PIN_PULLDOWN,
};


uint32_t hw_get_pin_peripheral(pin_t pin, const pin_map_t *pxPinMap, uint8_t count);
uint32_t hw_get_pin_attribute(pin_t pin, const pin_map_t *pxPinMap, uint8_t count);
uint8_t hw_get_pin_index(pin_t pin,const pin_map_t *p_pin_map,uint8_t count);

void sdk_api_gpio_cfg_input(uint32_t pin, uint8_t  pull_config);
uint32_t sdk_api_gpio_input(uint32_t pin);
void sdk_api_gpio_cfg_output(uint32_t pin);
void sdk_api_gpio_output(uint32_t pin,uint8_t val);
void sdk_api_gpio_cfg_mode(uint32_t pin,uint8_t mode);


GPIO_TypeDef * get_gpio_port(pin_t io);
uint32_t get_gpio_rcc(pin_t io);
uint32_t get_gpio_pin(pin_t io);
#endif //SDK_API_DEBUG_H
